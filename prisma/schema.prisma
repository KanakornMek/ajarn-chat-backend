generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id           String  @id @default(uuid())
  password     String
  refreshToken String?
  userId       String  @unique
  email        String  @unique
  User         User    @relation(fields: [userId], references: [id])
}

model Course {
  id          String       @id @default(uuid())
  name        String
  semester    String
  year        Int
  uniCourseId String
  Thread      Thread[]
  UserCourse  UserCourse[]
}

model Message {
  id        String   @id @default(uuid())
  threadId  String
  authorId  String
  message   String
  createdAt DateTime @default(now())
  User      User     @relation(fields: [authorId], references: [id])
  Thread    Thread   @relation(fields: [threadId], references: [id])
}

model Thread {
  id             String     @id @default(uuid())
  courseId       String
  authorId       String
  createdAt      DateTime   @default(now())
  urgencyTag     UrgencyTag
  status         Status
  topic          String
  content        String
  parentThreadId String?
  Message        Message[]
  User           User       @relation(fields: [authorId], references: [id])
  Course         Course     @relation(fields: [courseId], references: [id])
  Thread         Thread?    @relation("ThreadToThread", fields: [parentThreadId], references: [id])
  other_Thread   Thread[]   @relation("ThreadToThread")
}

model User {
  id         String       @id @default(uuid())
  firstName  String
  lastName   String       @unique
  role       UserRole
  year       Int
  email      String       @unique
  Auth       Auth?
  Message    Message[]
  Thread     Thread[]
  UserCourse UserCourse[]
}

model UserCourse {
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  Course    Course   @relation(fields: [courseId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@id([userId, courseId])
}

enum Status {
  pending
  answered
  archived
}

enum UrgencyTag {
  urgent
  regular
  lowPriority
}

enum UserRole {
  Student
  TA
  Lecturer
}
